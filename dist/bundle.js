(()=>{"use strict";function e(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var t;!function(e){e.Active="Active",e.Finished="Finished"}(t||(t={}));class n{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class r extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new r),this.instance}addProject(e,r,s){const i=new n(Math.random().toString(),e,r,s,t.Active);this.projects.push(i);for(const e of this.listeners)e(this.projects.slice())}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const s=r.getInstance();class i{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}class o extends i{constructor(){super("project-input","app",!0,"user-input"),this.configure()}gatherUserInput(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,n=this.peopleInputElement.value;return[{value:e,required:!0,minLength:3,maxLength:16},{value:t,required:!0,minLength:10,maxLength:1024},{value:+n,required:!0,min:1,max:10}].some((e=>!function(e){let t=!0;return e.required&&(t=t&&e.value.toString().trim().length>0),e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}(e)))?void alert("Title must be minmum 3 or maximum 16 length long.\nTitle must be minmum 10 or maximum 1024 length long.\nNumber of people must be minmum 1 or maximum 10 assigned."):[e,t,+n]}clearInput(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;s.addProject(e,n,r),this.clearInput()}}configure(){this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.element.addEventListener("submit",this.submitHandler)}renderContent(){throw new Error("Method not implemented.")}}!function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);i>3&&o&&Object.defineProperty(t,n,o)}([e],o.prototype,"submitHandler",null);var l=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class a extends i{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return this.project.people>1?`${this.project.people} persons`:`${this.project.people} person`}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){e.dataTransfer.clearData("text/plain")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}l([e],a.prototype,"dragStartHandler",null),l([e],a.prototype,"dragEndHandler",null);var c=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class d extends i{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}dropHandler(e){const n=e.dataTransfer.getData("text/plain");s.moveProject(n,"active"===this.type?t.Active:t.Finished)}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),s.addListener((e=>{const n=e.filter((e=>"active"===this.type?e.status===t.Active:e.status===t.Finished));this.assignedProjects=n,this.renderProjects()}))}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new a(this.element.querySelector("ul").id,e)}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}}c([e],d.prototype,"dragOverHandler",null),c([e],d.prototype,"dragLeaveHandler",null),c([e],d.prototype,"dropHandler",null),new o,new d("active"),new d("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,